import { useState, useCallback } from "react";
import type { ProfanityFilterResponse } from "@/types/chat";

const PROFANITY_WORDS = [
  "–±–ª—è–¥—å",
  "—Å—É–∫–∞",
  "–ø–∏–¥–æ—Ä",
  "—Ö—É–π",
  "–ø–∏–∑–¥–∞",
  "–µ–±–∞—Ç—å",
  "–µ–±–∞–Ω—ã–π",
  "–≥–∞–Ω–¥–æ–Ω",
  "—à–ª—é—Ö–∞",
  "–∫–æ–∑–µ–ª",
  "–¥–µ–±–∏–ª",
  "–∏–¥–∏–æ—Ç",
  "—Ç—É–ø–æ–π",
  "–¥—É—Ä–∞–∫",
  "–º—É–¥–∞–∫",
  "–ø—Ä–∏–¥—É—Ä–æ–∫",
  "–≥–æ–≤–Ω–æ",
  "—É—Ä–æ–¥",
  "—É–µ–±–æ–∫",
  "–¥–æ–ª–±–æ–µ–±",
  "–ø–µ—Ç—É—Ö",
  "–ª–æ—Ö",
  "—á–µ—Ä—Ç",
  "—Ö–µ—Ä–Ω—è",
];

const BLOCK_DURATION = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

export const useProfanityFilter = () => {
  const [blockedUsers, setBlockedUsers] = useState<Record<string, Date>>(() => {
    const stored = localStorage.getItem("blockedUsers");
    if (stored) {
      const parsed = JSON.parse(stored);
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ Date –æ–±—ä–µ–∫—Ç—ã
      Object.keys(parsed).forEach((key) => {
        parsed[key] = new Date(parsed[key]);
      });
      return parsed;
    }
    return {};
  });

  const isUserBlocked = useCallback(
    (userId: string): boolean => {
      const blockUntil = blockedUsers[userId];
      if (!blockUntil) return false;

      if (new Date() > blockUntil) {
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const updated = { ...blockedUsers };
        delete updated[userId];
        setBlockedUsers(updated);
        localStorage.setItem("blockedUsers", JSON.stringify(updated));
        return false;
      }

      return true;
    },
    [blockedUsers],
  );

  const blockUser = useCallback(
    (userId: string) => {
      const blockUntil = new Date(Date.now() + BLOCK_DURATION);
      const updated = { ...blockedUsers, [userId]: blockUntil };
      setBlockedUsers(updated);
      localStorage.setItem("blockedUsers", JSON.stringify(updated));
    },
    [blockedUsers],
  );

  const filterMessage = useCallback((text: string): ProfanityFilterResponse => {
    const lowercaseText = text.toLowerCase();
    const detectedWords: string[] = [];
    let filteredText = text;

    PROFANITY_WORDS.forEach((word) => {
      const regex = new RegExp(word, "gi");
      if (regex.test(lowercaseText)) {
        detectedWords.push(word);
        filteredText = filteredText.replace(regex, "*".repeat(word.length));
      }
    });

    return {
      isClean: detectedWords.length === 0,
      filteredText,
      detectedWords,
    };
  }, []);

  const sendProfanityEmail = async (
    userId: string,
    message: string,
    detectedWords: string[],
  ) => {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const emailData = {
        to: "sergejustinov52@gmail.com",
        subject: "üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞ –≤ —á–∞—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
        body: `
          –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞!
          
          –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId}
          –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
          –°–æ–æ–±—â–µ–Ω–∏–µ: "${message}"
          –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: ${detectedWords.join(", ")}
          
          –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç.
        `,
      };

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º mailto –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç)
      const mailtoLink = `mailto:${emailData.to}?subject=${encodeURIComponent(emailData.subject)}&body=${encodeURIComponent(emailData.body)}`;

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç
      window.open(mailtoLink, "_blank");

      console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ email");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error);
    }
  };

  const reportProfanity = useCallback(
    async (userId: string, message: string, detectedWords: string[]) => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email
      await sendProfanityEmail(userId, message, detectedWords);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const reports = JSON.parse(
        localStorage.getItem("profanityReports") || "[]",
      );
      reports.push({
        userId,
        message,
        detectedWords,
        timestamp: new Date().toISOString(),
      });
      localStorage.setItem("profanityReports", JSON.stringify(reports));

      console.log(
        "üìß –ú–∞—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ sergejustinov52@gmail.com:",
        {
          userId,
          message,
          detectedWords,
          timestamp: new Date().toISOString(),
        },
      );
    },
    [],
  );

  return {
    isUserBlocked,
    blockUser,
    filterMessage,
    reportProfanity,
    blockedUsers,
  };
};
